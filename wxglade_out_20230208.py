#!/usr/bin/env python3
# -*- coding: ISO-8859-1 -*-
#
# generated by wxGlade 1.0.4 on Tue Feb  8 09:21:09 2023
#

import wx

# begin wxGlade: dependencies
import wx.grid
# end wxGlade

# begin wxGlade: extracode
import csv
import os
import time
from time import sleep
import modbus_tk.defines as cst
import numpy as np
import serial
import serial.tools.list_ports
import wx
import wx.grid
import wx.xrc
from modbus_tk import modbus_rtu
# end wxGlade
from modbus_tk.exceptions import ModbusInvalidResponseError


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        global master
        global slave_addr
        global ser
        global time_cycle
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((530, 653))
        self.SetTitle("Safe Digital Data Logger")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("C:\\Users\\cnbofan1\\ABB\\Safe Digital in CN - Documents - Documents\\09_Tools\\Data logger by bob\\TRlogo.ico", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.frame_statusbar = self.CreateStatusBar(1)
        self.frame_statusbar.SetStatusWidths([-1])
        # statusbar fields
        frame_statusbar_fields = ["frame_statusbar"]
        for i in range(len(frame_statusbar_fields)):
            self.frame_statusbar.SetStatusText(frame_statusbar_fields[i], i)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "MDC4-M Data Logger V1.0 (DTR,GP,MM,PD)")
        sizer_1.Add(label_2, 0, wx.ALL, 3)

        self.notebook_1 = wx.Notebook(self.panel_1, wx.ID_ANY)
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)

        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.notebook_1_pane_1, "TR test")

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        sizer_3 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, "COM"), wx.HORIZONTAL)
        sizer_2.Add(sizer_3, 0, wx.EXPAND, 0)

        self.choice_1 = wx.Choice(self.notebook_1_pane_1, wx.ID_ANY, choices=["choice 1"])
        self.choice_1.SetMinSize(wx.DLG_UNIT(self.choice_1, wx.Size(100, 12)))
        self.choice_1.SetSelection(0)
        sizer_3.Add(self.choice_1, 0, wx.ALL, 3)

        self.button_1 = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "Start")
        sizer_3.Add(self.button_1, 0, wx.ALL, 3)

        self.button_2 = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "Stop")
        self.button_2.Enable(False)
        sizer_3.Add(self.button_2, 0, wx.ALL, 3)

        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, "Modbus Address"), wx.HORIZONTAL)
        sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)

        self.text_ctrl_1 = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "1")
        self.text_ctrl_1.SetMinSize(wx.DLG_UNIT(self.text_ctrl_1, wx.Size(100, 12)))
        sizer_4.Add(self.text_ctrl_1, 0, wx.ALL, 3)

        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, "Read Cycle (s)"), wx.HORIZONTAL)
        sizer_2.Add(sizer_5, 0, wx.EXPAND, 0)

        self.spin_ctrl_1 = wx.SpinCtrl(self.notebook_1_pane_1, wx.ID_ANY, "10", min=1, max=600)
        self.spin_ctrl_1.SetMinSize(wx.DLG_UNIT(self.spin_ctrl_1, wx.Size(100, 12)))
        sizer_5.Add(self.spin_ctrl_1, 0, wx.ALL, 3)

        sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, "Data directory"), wx.VERTICAL)
        sizer_2.Add(sizer_6, 0, wx.EXPAND, 0)

        self.window_1 = wx.DirPickerCtrl(self.notebook_1_pane_1, wx.ID_ANY)
        self.window_1.SetMinSize(wx.DLG_UNIT(self.window_1, wx.Size(246, 12)))
        sizer_6.Add(self.window_1, 0, wx.EXPAND, 0)

        self.label_3 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "The data file name is \"MDC4_M_TR_Data_yyyymmdd.csv\"")
        sizer_6.Add(self.label_3, 0, wx.ALL, 3)

        self.grid_2 = wx.grid.Grid(self.notebook_1_pane_1, wx.ID_ANY, size=(1, 1))
        self.grid_2.CreateGrid(1, 2)
        self.grid_2.SetRowLabelSize(100)
        self.grid_2.SetColLabelSize(27)
        self.grid_2.SetColLabelValue(0, u"Temp. (℃）")
        self.grid_2.SetColSize(0, 127)
        self.grid_2.SetColLabelValue(1, "Humidity (%)")
        self.grid_2.SetColSize(1, 127)
        self.grid_2.SetRowLabelValue(0, "Environment")
        self.grid_2.SetMinSize(wx.DLG_UNIT(self.grid_2, wx.Size(206, 30)))
        sizer_2.Add(self.grid_2, 0, wx.ALL | wx.EXPAND, 3)

        self.grid_1 = wx.grid.Grid(self.notebook_1_pane_1, wx.ID_ANY, size=(1, 1))
        self.grid_1.CreateGrid(6, 4)
        self.grid_1.SetRowLabelSize(100)
        self.grid_1.SetColLabelSize(33)
        self.grid_1.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid_1.SetColLabelValue(0, u"Temp (℃)")
        self.grid_1.SetColSize(0, 85)
        self.grid_1.SetColLabelValue(1, "Current (A)")
        self.grid_1.SetColSize(1, 85)
        self.grid_1.SetColLabelValue(2, u"DTR warning (℃)")
        self.grid_1.SetColSize(2, 100)
        self.grid_1.SetColLabelValue(3, u"DTR alarm (℃)")
        self.grid_1.SetColSize(3, 100)
        self.grid_1.SetRowLabelValue(0, "Unit 1 Phase A")
        self.grid_1.SetRowLabelValue(1, "Unit 1 Phase B")
        self.grid_1.SetRowLabelValue(2, "Unit 1 Phase C")
        self.grid_1.SetRowLabelValue(3, "Unit 2 Phase A")
        self.grid_1.SetRowLabelValue(4, "Unit 2 Phase B")
        self.grid_1.SetRowLabelValue(5, "Unit 2 Phase C")
        self.grid_1.SetMinSize(wx.DLG_UNIT(self.grid_1, wx.Size(206, 80)))
        sizer_2.Add(self.grid_1, 0, wx.ALL | wx.EXPAND, 3)

        self.grid_3 = wx.grid.Grid(self.notebook_1_pane_1, wx.ID_ANY, size=(1, 1))
        self.grid_3.CreateGrid(1, 8)
        self.grid_3.SetRowLabelSize(105)
        self.grid_3.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid_3.SetColLabelValue(0, u"Temp. (℃）")
        self.grid_3.SetColSize(0, 80)
        self.grid_3.SetColLabelValue(1, "Pressure (bar)")
        self.grid_3.SetColSize(1, 90)
        self.grid_3.SetColLabelValue(2, "P20 (bar)")
        self.grid_3.SetColSize(2, 80)
        self.grid_3.SetColLabelValue(3, "P20 avg (bar)")
        self.grid_3.SetColSize(3, 80)
        self.grid_3.SetColLabelValue(4, "ppmv")
        self.grid_3.SetColSize(4, 80)
        self.grid_3.SetColLabelValue(5, u"Dew temp (℃)")
        self.grid_3.SetColSize(5, 100)
        self.grid_3.SetColLabelValue(6, u"Dew temp in P0 (℃)")
        self.grid_3.SetColSize(6, 120)
        self.grid_3.SetColLabelValue(7, "RH (%)")
        self.grid_3.SetColSize(7, 80)
        self.grid_3.SetRowLabelValue(0, "Mano 1 ")
        self.grid_3.SetMinSize(wx.DLG_UNIT(self.grid_3, wx.Size(206, 30)))
        sizer_2.Add(self.grid_3, 0, wx.ALL | wx.EXPAND, 2)

        self.grid_4 = wx.grid.Grid(self.notebook_1_pane_1, wx.ID_ANY, size=(1, 1))
        self.grid_4.CreateGrid(1, 4)
        self.grid_4.SetRowLabelSize(100)
        self.grid_4.SetColLabelSize(32)
        self.grid_4.SetSelectionMode(wx.grid.Grid.SelectColumns)
        self.grid_4.SetColLabelValue(0, u"PD intensity  (dB）")
        self.grid_4.SetColSize(0, 120)
        self.grid_4.SetColLabelValue(1, "PD frequency  (peak/cycle)")
        self.grid_4.SetColSize(1, 160)
        self.grid_4.SetColLabelValue(2, "PD indicator")
        self.grid_4.SetColSize(2, 80)
        self.grid_4.SetColLabelValue(3, "PD Health ")
        self.grid_4.SetColSize(3, 80)
        self.grid_4.SetRowLabelValue(0, "Unit 1")
        self.grid_4.SetMinSize(wx.DLG_UNIT(self.grid_4, wx.Size(206, 30)))
        sizer_2.Add(self.grid_4, 0, wx.ALL | wx.EXPAND, 3)

        self.notebook_1_pane_1.SetSizer(sizer_2)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.timer_1 = wx.Timer()
        self.timer_1.SetOwner(self, wx.ID_ANY)
        self.__set_properties()
        self.Bind(wx.EVT_TIMER, self.do_logging, self.timer_1)

        self.Bind(wx.EVT_BUTTON, self.start_logging, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.stop_logging, self.button_2)
        # end wxGlade

    def __set_properties(self):
        global ser
        # serial port
        ser = serial.Serial()
        preferred_index = 0
        self.choice_1.Clear()
        self.ports = []
        for n, (portname, desc, hwid) in enumerate(sorted(serial.tools.list_ports.comports())):
            self.choice_1.Append(u'{} - {}'.format(portname, desc))
            self.ports.append(portname)
            if ser.name == portname:
                preferred_index = n
        self.choice_1.SetSelection(preferred_index)
        self.frame_statusbar.SetStatusText('Please select COM/Modbus Addr/Cycle/Folder and start...', 0)

    def show_message(self, msg='message'):
        dlg = wx.MessageDialog(None, msg, 'Information', wx.OK)
        if dlg.ShowModal() == wx.ID_OK:
            dlg.Close(True)
        else:
            dlg.Close(True)
        dlg.Destroy()

    def start_logging(self, event):  # wxGlade: MyFrame.<event_handler>
        global master
        global slave_addr
        global ser
        global time_cycle

        PORT = self.ports[self.choice_1.GetSelection()]
        slave_addr = int(self.text_ctrl_1.GetValue())

        ser = serial.Serial(port=PORT, baudrate=9600, bytesize=8, parity='N', stopbits=1, xonxoff=0)

        master = modbus_rtu.RtuMaster(ser)
        master.set_timeout(5.0)
        master.set_verbose(True)

        # self.button_1.Label = 'Connected'
        # self.button_1.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_HIGHLIGHT))
        self.button_1.Disable()
        self.button_2.Enable()

        time_cycle = self.spin_ctrl_1.GetValue() * 1000
        self.timer_1.Start(time_cycle)
        # self.label_4.SetLabelText("Status: Running...")
        self.frame_statusbar.SetStatusText('Running...', 0)

    def stop_logging(self, event):  # wxGlade: MyFrame.<event_handler>
        master.close()
        if ser.isOpen():
            ser.close()
        self.button_1.Label = 'Open'
        self.button_1.Enable()
        self.button_1.SetBackgroundColour(self.button_2.GetBackgroundColour())
        self.button_2.Disable()
        self.timer_1.Stop()
        # self.label_4.SetLabelText("Status: Stopped")
        self.frame_statusbar.SetStatusText('Stopped...', 0)

    def stop_timer(self):
        master.close()
        if ser.isOpen():
            ser.close()
        self.button_1.Label = 'Open'
        self.button_1.Enable()
        self.button_1.SetBackgroundColour(self.button_2.GetBackgroundColour())
        self.button_2.Disable()
        self.timer_1.Stop()
        # self.label_4.SetLabelText("Status: Stopped")
        # self.frame_statusbar.SetStatusText('Stopped...', 0)

    def do_logging(self, event):
        global time_cycle
        global master
        global ser
        global slave_addr

        try:
            localtime = time.localtime(time.time())
            date_string = "{:04d}{:02d}{:02d}".format(localtime.tm_year, localtime.tm_mon, localtime.tm_mday)
            file_name = "MDC4_M_TR_Data_{}.csv".format(date_string)
            data_folder = self.window_1.GetPath()
            if not os.path.exists(data_folder):
                os.mkdir(data_folder)
            data_file = "{}/{}".format(data_folder, file_name)
            # print(data_file)
            self.label_3.SetLabelText("The data file name is \"{}\"".format(file_name))

            var_names = ['Time', 'Env_T', 'Env_H',
                         'Unit1_A_T', 'Unit1_B_T', 'Unit1_C_T',
                         'Unit2_A_T', 'Unit2_B_T', 'Unit2_C_T',
                         'Unit1_A_Cur', 'Unit1_B_Cur', 'Unit1_C_Cur',
                         'Unit2_A_Cur', 'Unit2_B_Cur', 'Unit2_C_Cur',
                         'Unit1_A_warn_limit', 'Unit1_B_warn_limit', 'Unit1_C_warn_limit',
                         'Unit2_A_warn_limit', 'Unit2_B_warn_limit', 'Unit2_C_warn_limit',
                         'Unit1_A_alarm_limit', 'Unit1_B_alarm_limit', 'Unit1_C_alarm_limit',
                         'Unit2_A_alarm_limit', 'Unit2_B_alarm_limit', 'Unit2_C_alarm_limit',
                         'Unit1_Mano_T','Unit1_Mano_P','Unit1_Mano_P20','Unit1_Mano_P20_avg', 
                         'Unit1_Mano_ppmv', 'Unit1_Mano_Td', 'Unit1_Mano_Td0', 'Unit1_Mano_RH', 
                         'Unit1_PD_inten','Unit1_PD_freq','Unit1_PD_indi','Unit1_PD_score']
            var_default = ['2022-01-07 00:00:00'] + ['0' for i in range(24)]
            line_default = dict(zip(var_names, var_default))
            with open(data_file, 'a', newline='') as csvfile:
                writer = csv.DictWriter(csvfile, fieldnames=var_names)

                file_size = os.stat(data_file)
                if file_size.st_size == 0:
                    writer.writeheader()

                raw_env_data = np.array(master.execute(slave_addr, cst.READ_INPUT_REGISTERS, 21, 2)) # Ambient T&H sensor
                sleep(0.1)
                raw_t_data = np.array(master.execute(slave_addr, cst.READ_INPUT_REGISTERS, 0, 6)) # Temperature rise sensor
                sleep(0.1)
                raw_mano_data = np.array(master.execute(slave_addr, cst.READ_INPUT_REGISTERS, 500, 4)) # manometer 
                sleep(0.1)
                raw_cur_data = np.array(master.execute(slave_addr, cst.READ_INPUT_REGISTERS, 744, 12)) # current sensor

                raw_DTR_limit_data = np.array(master.execute(slave_addr, cst.READ_INPUT_REGISTERS, 1400, 12)) # DTR warning and alarm limits
                
                raw_PD1_data = np.array(master.execute(slave_addr, cst.READ_INPUT_REGISTERS, 350, 24)) # DTR warning and alarm limits
                raw_PD2_data = np.array(master.execute(slave_addr, cst.READ_INPUT_REGISTERS, 374, 24)) # DTR warning and alarm limits

                raw_ppmv_data = np.array(master.execute(slave_addr, cst.READ_INPUT_REGISTERS, 311, 1)) # Micro-moisture data
                raw_dew_data = np.array(master.execute(slave_addr, cst.READ_INPUT_REGISTERS, 312, 1)) # Micro-moisture data
                # raw_dew_data = (raw_dew_data - 2 ** 16 + 1) * 0.01 # convert signed int 
                raw_dew_p0_data = np.array(master.execute(slave_addr, cst.READ_INPUT_REGISTERS, 313, 1))# Micro-moisture data
                # raw_dew_p0_data = (raw_dew_p0_data - 2 ** 16 + 1) * 0.01 # convert signed int
                raw_RH_data = np.array(master.execute(slave_addr, cst.READ_INPUT_REGISTERS, 314, 1)) # Micro-moisture data


                self.grid_2.SetCellValue([0, 0], str(raw_env_data[0] * 0.1))  # env T
                self.grid_2.SetCellValue([0, 1], str(raw_env_data[1]))  # env H

                self.grid_3.SetCellValue([0, 0], str(raw_mano_data[0] * 0.1))  # manometer T
                self.grid_3.SetCellValue([0, 1], str(raw_mano_data[1] * 0.01))  # manometer P
                self.grid_3.SetCellValue([0, 2], str(raw_mano_data[2] * 0.01))  # manometer P20
                self.grid_3.SetCellValue([0, 3], str(raw_mano_data[3] * 0.01))  # manometer P20 avg

                self.grid_1.SetCellValue([0, 0], str(raw_t_data[0] * 0.1)) # temp unit1 A
                self.grid_1.SetCellValue([1, 0], str(raw_t_data[1] * 0.1)) # temp unit1 B
                self.grid_1.SetCellValue([2, 0], str(raw_t_data[2] * 0.1)) # temp unit1 C
                self.grid_1.SetCellValue([3, 0], str(raw_t_data[3] * 0.1)) # temp unit2 A
                self.grid_1.SetCellValue([4, 0], str(raw_t_data[4] * 0.1)) # temp unit2 B
                self.grid_1.SetCellValue([5, 0], str(raw_t_data[5] * 0.1)) # temp unit2 C
                
                self.grid_1.SetCellValue([0, 1], str(raw_cur_data[0])) # cur unit1 A
                self.grid_1.SetCellValue([1, 1], str(raw_cur_data[1])) # cur unit1 B
                self.grid_1.SetCellValue([2, 1], str(raw_cur_data[2])) # cur unit1 C
                self.grid_1.SetCellValue([3, 1], str(raw_cur_data[6])) # cur unit2 A
                self.grid_1.SetCellValue([4, 1], str(raw_cur_data[7])) # cur unit2 B
                self.grid_1.SetCellValue([5, 1], str(raw_cur_data[8])) # cur unit2 C

                self.grid_1.SetCellValue([0, 2], str(raw_DTR_limit_data[0] * 0.1)) # DTR warning unit1 A
                self.grid_1.SetCellValue([1, 2], str(raw_DTR_limit_data[2] * 0.1)) # DTR warning unit1 B
                self.grid_1.SetCellValue([2, 2], str(raw_DTR_limit_data[4] * 0.1)) # DTR warning unit1 C
                self.grid_1.SetCellValue([3, 2], str(raw_DTR_limit_data[6] * 0.1)) # DTR warning unit2 A
                self.grid_1.SetCellValue([4, 2], str(raw_DTR_limit_data[8] * 0.1)) # DTR warning unit2 B
                self.grid_1.SetCellValue([5, 2], str(raw_DTR_limit_data[10] * 0.1)) # DTR warning unit2 C
                
                self.grid_1.SetCellValue([0, 3], str(raw_DTR_limit_data[1] * 0.1)) # DTR alarm unit1 A
                self.grid_1.SetCellValue([1, 3], str(raw_DTR_limit_data[3] * 0.1)) # DTR alarm unit1 B
                self.grid_1.SetCellValue([2, 3], str(raw_DTR_limit_data[5] * 0.1)) # DTR alarm unit1 C
                self.grid_1.SetCellValue([3, 3], str(raw_DTR_limit_data[7] * 0.1)) # DTR alarm unit2 A
                self.grid_1.SetCellValue([4, 3], str(raw_DTR_limit_data[9] * 0.1)) # DTR alarm unit2 B
                self.grid_1.SetCellValue([5, 3], str(raw_DTR_limit_data[11] * 0.1)) # DTR alarm unit2 C

                self.grid_4.SetCellValue([0, 0], '{:.2f}'.format((raw_PD1_data[0] - 2 ** 16 + 1) * 0.1)) # PD intensity unit1
                self.grid_4.SetCellValue([0, 1], '{:.2f}'.format((raw_PD1_data[0] - 2 ** 16 + 1) * 0.1)) # PD frequency unit1
                self.grid_4.SetCellValue([0, 2], str(raw_PD2_data[0])) # PD indicator unit1
                self.grid_4.SetCellValue([0, 3], str(raw_PD2_data[1])) # PD heathy score unit1

                self.grid_5.SetCellValue([0, 0], str(raw_ppmv_data[0])) # ppmv
                self.grid_5.SetCellValue([0, 1], '{:.2f}'.format((raw_dew_data[0] - 2 ** 16 + 1) * 0.01)) # Dew temp with pressure Td
                self.grid_5.SetCellValue([0, 2], '{:.2f}'.format((raw_dew_p0_data[0] - 2 ** 16 + 1) * 0.01)) # Dew temp with norminal pressure Td0 
                self.grid_5.SetCellValue([0, 3], str(raw_RH_data[0] * 0.01)) # Relative humidity RH

                # for row in range(6):
                #     for col in range(3):
                #         self.grid_1.SetCellValue([row, col], str(raw_t_data[row * 3 + col] * 0.1))

                line_buf = line_default
                localtime = time.localtime(time.time())
                time_string = "{:04d}-{:02d}-{:02d} {:02d}:{:02d}:{:02d}".format(localtime.tm_year, localtime.tm_mon, localtime.tm_mday,
                                                                                 localtime.tm_hour, localtime.tm_min, localtime.tm_sec)
                line_buf['Time'] = time_string
                line_buf['Env_T'] = self.grid_2.GetCellValue(0, 0)
                line_buf['Env_H'] = self.grid_2.GetCellValue(0, 1)
                # for row in range(6):
                #     for col in range(3):
                #         line_buf[var_names[3 + col + row * 3]] = self.grid_1.GetCellValue(row, col)
                        
                line_buf['Unit1_A_T'] = self.grid_1.GetCellValue(0, 0)
                line_buf['Unit1_B_T'] = self.grid_1.GetCellValue(1, 0)
                line_buf['Unit1_C_T'] = self.grid_1.GetCellValue(2, 0)
                line_buf['Unit2_A_T'] = self.grid_1.GetCellValue(3, 0)
                line_buf['Unit2_B_T'] = self.grid_1.GetCellValue(4, 0)
                line_buf['Unit2_C_T'] = self.grid_1.GetCellValue(5, 0)

                line_buf['Unit1_A_Cur'] = self.grid_1.GetCellValue(0, 1)
                line_buf['Unit1_B_Cur'] = self.grid_1.GetCellValue(1, 1)
                line_buf['Unit1_C_Cur'] = self.grid_1.GetCellValue(2, 1)
                line_buf['Unit2_A_Cur'] = self.grid_1.GetCellValue(3, 1)
                line_buf['Unit2_B_Cur'] = self.grid_1.GetCellValue(4, 1)
                line_buf['Unit2_C_Cur'] = self.grid_1.GetCellValue(5, 1)

                line_buf['Unit1_A_warn_limit'] = self.grid_1.GetCellValue(0, 2)
                line_buf['Unit1_B_warn_limit'] = self.grid_1.GetCellValue(1, 2)
                line_buf['Unit1_C_warn_limit'] = self.grid_1.GetCellValue(2, 2)
                line_buf['Unit2_A_warn_limit'] = self.grid_1.GetCellValue(3, 2)
                line_buf['Unit2_B_warn_limit'] = self.grid_1.GetCellValue(4, 2)
                line_buf['Unit2_C_warn_limit'] = self.grid_1.GetCellValue(5, 2)

                line_buf['Unit1_A_alarm_limit'] = self.grid_1.GetCellValue(0, 3)
                line_buf['Unit1_B_alarm_limit'] = self.grid_1.GetCellValue(1, 3)
                line_buf['Unit1_C_alarm_limit'] = self.grid_1.GetCellValue(2, 3)
                line_buf['Unit2_A_alarm_limit'] = self.grid_1.GetCellValue(3, 3)
                line_buf['Unit2_B_alarm_limit'] = self.grid_1.GetCellValue(4, 3)
                line_buf['Unit2_C_alarm_limit'] = self.grid_1.GetCellValue(5, 3)

                # data record for manometer
                line_buf['Unit1_Mano_T'] = self.grid_3.GetCellValue(0, 0)
                line_buf['Unit1_Mano_P'] = self.grid_3.GetCellValue(0, 1)
                line_buf['Unit1_Mano_P20'] = self.grid_3.GetCellValue(0, 2)
                line_buf['Unit1_Mano_P20_avg'] = self.grid_3.GetCellValue(0, 3)
                
                # data record for PD
                line_buf['Unit1_PD_inten'] = self.grid_4.GetCellValue(0, 0)
                line_buf['Unit1_PD_freq'] = self.grid_4.GetCellValue(0, 1)
                line_buf['Unit1_PD_indi'] = self.grid_4.GetCellValue(0, 2)
                line_buf['Unit1_PD_score'] = self.grid_4.GetCellValue(0, 3)
                
                # data record for MM
                line_buf['Unit1_Mano_ppmv'] = self.grid_5.GetCellValue(0, 0)
                line_buf['Unit1_Mano_Td'] = self.grid_5.GetCellValue(0, 1)
                line_buf['Unit1_Mano_Td0'] = self.grid_5.GetCellValue(0, 2)
                line_buf['Unit1_Mano_RH'] = self.grid_5.GetCellValue(0, 3)
                
                writer.writerow(line_buf)
                
        except FileNotFoundError:
            self.frame_statusbar.SetStatusText('Error: please specify the data folder!', 0)
            self.stop_timer()
        except ModbusInvalidResponseError:
            self.frame_statusbar.SetStatusText('Error: please check Modbus Addr./RS485 Cable.', 0)
            self.stop_timer()
        except Exception as err:
            # self.label_4.SetLabelText("Status: ERROR")
            self.frame_statusbar.SetStatusText('Unknown error...', 0)
            self.stop_timer()
            raise err

# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
