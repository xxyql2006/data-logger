#!/usr/bin/env python3
# -*- coding: ISO-8859-1 -*-
#
# generated by wxGlade 1.0.4 on Mon May 22 11:33:35 2023
#

import wx

# begin wxGlade: dependencies
import wx.grid
# end wxGlade

# begin wxGlade: extracode
import csv
import os
import time
from time import sleep
import modbus_tk.defines as cst
import numpy as np
import serial
import serial.tools.list_ports
import wx
import wx.grid
import wx.xrc
from modbus_tk import modbus_rtu
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        global master
        global slave_addr
        global ser
        global time_cycle
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((530, 653))
        self.SetTitle("Safe Digital Data Logger")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("C:\\Users\\cnbofan1\\ABB\\Safe Digital in CN - Documents - Documents\\09_Tools\\Data logger by bob\\TRlogo.ico", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.frame_statusbar = self.CreateStatusBar(1)
        self.frame_statusbar.SetStatusWidths([-1])
        # statusbar fields
        frame_statusbar_fields = ["frame_statusbar"]
        for i in range(len(frame_statusbar_fields)):
            self.frame_statusbar.SetStatusText(frame_statusbar_fields[i], i)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "MDC4-M Data Logger V1.0 (DTR,GP,MM,PD)")
        sizer_1.Add(label_2, 0, wx.ALL, 3)

        self.notebook_1 = wx.Notebook(self.panel_1, wx.ID_ANY)
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)

        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.notebook_1_pane_1, "TR test")

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        sizer_3 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, "COM"), wx.HORIZONTAL)
        sizer_2.Add(sizer_3, 0, wx.EXPAND, 0)

        self.choice_1 = wx.Choice(self.notebook_1_pane_1, wx.ID_ANY, choices=["choice 1"])
        self.choice_1.SetMinSize(wx.DLG_UNIT(self.choice_1, wx.Size(100, 12)))
        self.choice_1.SetSelection(0)
        sizer_3.Add(self.choice_1, 0, wx.ALL, 3)

        self.button_1 = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "Start")
        sizer_3.Add(self.button_1, 0, wx.ALL, 3)

        self.button_2 = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "Stop")
        self.button_2.Enable(False)
        sizer_3.Add(self.button_2, 0, wx.ALL, 3)

        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, "Modbus Address"), wx.HORIZONTAL)
        sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)

        self.text_ctrl_1 = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "1")
        self.text_ctrl_1.SetMinSize(wx.DLG_UNIT(self.text_ctrl_1, wx.Size(100, 12)))
        sizer_4.Add(self.text_ctrl_1, 0, wx.ALL, 3)

        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, "Read Cycle (s)"), wx.HORIZONTAL)
        sizer_2.Add(sizer_5, 0, wx.EXPAND, 0)

        self.spin_ctrl_1 = wx.SpinCtrl(self.notebook_1_pane_1, wx.ID_ANY, "10", min=1, max=600)
        self.spin_ctrl_1.SetMinSize(wx.DLG_UNIT(self.spin_ctrl_1, wx.Size(100, 12)))
        sizer_5.Add(self.spin_ctrl_1, 0, wx.ALL, 3)

        sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, "Data directory"), wx.VERTICAL)
        sizer_2.Add(sizer_6, 0, wx.EXPAND, 0)

        self.window_1 = wx.DirPickerCtrl(self.notebook_1_pane_1, wx.ID_ANY)
        self.window_1.SetMinSize(wx.DLG_UNIT(self.window_1, wx.Size(246, 12)))
        sizer_6.Add(self.window_1, 0, wx.EXPAND, 0)

        self.label_3 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "The data file name is \"MDC4_M_TR_Data_yyyymmdd.csv\"")
        sizer_6.Add(self.label_3, 0, wx.ALL, 3)

        self.grid_2 = wx.grid.Grid(self.notebook_1_pane_1, wx.ID_ANY, size=(1, 1))
        self.grid_2.CreateGrid(1, 2)
        self.grid_2.SetRowLabelSize(100)
        self.grid_2.SetColLabelSize(27)
        self.grid_2.SetColLabelValue(0, u"Temp. (\u2103\uff09")
        self.grid_2.SetColSize(0, 127)
        self.grid_2.SetColLabelValue(1, "Humidity (%)")
        self.grid_2.SetColSize(1, 127)
        self.grid_2.SetRowLabelValue(0, "Environment")
        self.grid_2.SetMinSize(wx.DLG_UNIT(self.grid_2, wx.Size(206, 30)))
        sizer_2.Add(self.grid_2, 1, wx.ALL | wx.EXPAND, 3)

        self.grid_1 = wx.grid.Grid(self.notebook_1_pane_1, wx.ID_ANY, size=(1, 1))
        self.grid_1.CreateGrid(6, 4)
        self.grid_1.SetRowLabelSize(100)
        self.grid_1.SetColLabelSize(33)
        self.grid_1.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid_1.SetColLabelValue(0, u"Temp (\u2103)")
        self.grid_1.SetColSize(0, 85)
        self.grid_1.SetColLabelValue(1, "Current (A)")
        self.grid_1.SetColSize(1, 85)
        self.grid_1.SetColLabelValue(2, u"DTR warning (\u2103)")
        self.grid_1.SetColSize(2, 100)
        self.grid_1.SetColLabelValue(3, u"DTR alarm (\u2103)")
        self.grid_1.SetColSize(3, 100)
        self.grid_1.SetRowLabelValue(0, "Unit 1 Phase A")
        self.grid_1.SetRowLabelValue(1, "Unit 1 Phase B")
        self.grid_1.SetRowLabelValue(2, "Unit 1 Phase C")
        self.grid_1.SetRowLabelValue(3, "Unit 2 Phase A")
        self.grid_1.SetRowLabelValue(4, "Unit 2 Phase B")
        self.grid_1.SetRowLabelValue(5, "Unit 2 Phase C")
        self.grid_1.SetMinSize(wx.DLG_UNIT(self.grid_1, wx.Size(206, 80)))
        sizer_2.Add(self.grid_1, 0, wx.ALL | wx.EXPAND, 3)

        self.grid_3 = wx.grid.Grid(self.notebook_1_pane_1, wx.ID_ANY, size=(1, 1))
        self.grid_3.CreateGrid(2, 11)
        self.grid_3.SetRowLabelSize(105)
        self.grid_3.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.grid_3.SetColLabelValue(0, u"Temp. (\u2103\uff09")
        self.grid_3.SetColSize(0, 80)
        self.grid_3.SetColLabelValue(1, "Pressure (bar)")
        self.grid_3.SetColSize(1, 90)
        self.grid_3.SetColLabelValue(2, "P20 (bar)")
        self.grid_3.SetColSize(2, 80)
        self.grid_3.SetColLabelValue(3, "P20 avg (bar)")
        self.grid_3.SetColSize(3, 80)
        self.grid_3.SetColLabelValue(4, "Moisture (ppmv)")
        self.grid_3.SetColSize(4, 100)
        self.grid_3.SetColLabelValue(5, u"Dew temp Td (\u2103)")
        self.grid_3.SetColSize(5, 100)
        self.grid_3.SetColLabelValue(6, u"Dew temp Td0 (\u2103)")
        self.grid_3.SetColSize(6, 120)
        self.grid_3.SetColLabelValue(7, "RH in % ")
        self.grid_3.SetColSize(7, 80)
        self.grid_3.SetColLabelValue(8, "APL ppmv")
        self.grid_3.SetColSize(8, 80)
        self.grid_3.SetColLabelValue(9, "APL Tavg")
        self.grid_3.SetColSize(9, 80)
        self.grid_3.SetColLabelValue(10, "APL T_warn")
        self.grid_3.SetColSize(10, 80)
        self.grid_3.SetRowLabelValue(0, "Mano1")
        self.grid_3.SetRowLabelValue(1, "Mano2")
        self.grid_3.SetMinSize(wx.DLG_UNIT(self.grid_3, wx.Size(206, 30)))
        sizer_2.Add(self.grid_3, 1, wx.ALL | wx.EXPAND, 3)

        self.grid_4 = wx.grid.Grid(self.notebook_1_pane_1, wx.ID_ANY, size=(1, 1))
        self.grid_4.CreateGrid(1, 4)
        self.grid_4.SetRowLabelSize(100)
        self.grid_4.SetColLabelSize(32)
        self.grid_4.SetSelectionMode(wx.grid.Grid.SelectColumns)
        self.grid_4.SetColLabelValue(0, u"PD intensity  (dB\uff09")
        self.grid_4.SetColSize(0, 120)
        self.grid_4.SetColLabelValue(1, "PD frequency  (peak/cycle)")
        self.grid_4.SetColSize(1, 160)
        self.grid_4.SetColLabelValue(2, "PD indicator")
        self.grid_4.SetColSize(2, 80)
        self.grid_4.SetColLabelValue(3, "PD Health ")
        self.grid_4.SetColSize(3, 80)
        self.grid_4.SetRowLabelValue(0, "Unit 1")
        self.grid_4.SetMinSize(wx.DLG_UNIT(self.grid_4, wx.Size(206, 30)))
        sizer_2.Add(self.grid_4, 1, wx.ALL | wx.EXPAND, 3)

        self.notebook_1_pane_1.SetSizer(sizer_2)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.timer_1 = wx.Timer()
        self.timer_1.SetOwner(self, wx.ID_ANY)
        self.__set_properties()
        self.Bind(wx.EVT_TIMER, self.do_logging, self.timer_1)

        self.Bind(wx.EVT_BUTTON, self.start_logging, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.stop_logging, self.button_2)
        # end wxGlade

    def start_logging(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'start_logging' not implemented!")
        event.Skip()

    def stop_logging(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'stop_logging' not implemented!")
        event.Skip()

# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
